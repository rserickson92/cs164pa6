// Generated by CoffeeScript 1.8.0
(function() {
  var board, game, snake;

  board = (function() {
    board.prototype.board_array = [];

    function board(width, height) {
      var x, y, _i, _j, _ref, _ref1;
      this.width = width;
      this.height = height;
      for (y = _i = 0, _ref = this.height; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        this.board_array[y] = [];
        for (x = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          this.board_array[y][x] = 0;
        }
      }
    }

    board.prototype.getEntry = function(x, y) {
      return this.board_array[y][x];
    };

    board.prototype.setEntry = function(x, y, type) {
      return this.board_array[y][x] = type;
    };

    board.prototype.printboard = function(score) {
      var html, x, y, _i, _j, _ref, _ref1;
      html = '<table>';
      for (y = _i = 0, _ref = this.height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        html += '<tr>';
        for (x = _j = 0, _ref1 = this.width - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          if (this.board_array[y][x] === 0) {
            html += '<td class="empty"></td>';
          } else if (this.board_array[y][x] === 1) {
            html += '<td class="pellet"></td>';
          } else if (this.board_array[y][x] === 2) {
            html += '<td class="snake_body"></td>';
          } else {
            html += '<td class="snake_head"></td>';
          }
        }
        html += '</tr>';
      }
      html += '</table>';
      document.getElementById('board').innerHTML = html;
      return document.getElementById('score_holder').innerHTML = score;
    };

    return board;

  })();

  snake = (function() {
    snake.prototype.direction = 1;

    snake.prototype.board_width = 20;

    snake.prototype.board_height = 20;

    snake.prototype.snake_list = [];

    snake.prototype.empty_list = [];

    snake.prototype.is_gameover = 0;

    snake.prototype.score = 0;

    snake.prototype.move = function() {
      var head;
      head = this.snake_list[0];
      if (this.direction === 1) {
        head = {
          'x': head.x - 1,
          'y': head.y
        };
      } else if (this.direction === 2) {
        head = {
          'x': head.x + 1,
          'y': head.y
        };
      } else if (this.direction === 3) {
        head = {
          'x': head.x,
          'y': head.y - 1
        };
      } else {
        head = {
          'x': head.x,
          'y': head.y + 1
        };
      }
      if (head.x < 0 || head.x >= this.board_width || head.y < 0 || head.y >= this.board.height) {
        this.is_gameover = 1;
      } else if (this.board.getEntry(head.x, head.y) === 2) {
        this.is_gameover = 1;
      }
      if (this.is_gameover === 1) {
        return this.gameover();
      } else {
        return this.update(head);
      }
    };

    snake.prototype.gameover = function() {
      return document.getElementById('gameover').style.visibility = 'visible';
    };

    snake.prototype.update = function(head) {
      var i, last, remove, s, tmp, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2, _ref3;
      last = this.snake_list[this.snake_list.length - 1];
      for (i = _i = 0, _ref = this.snake_list.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        tmp = this.snake_list[i];
        this.snake_list[i] = head;
        head = tmp;
      }
      if (this.board.getEntry(this.snake_list[0].x, this.snake_list[0].y) !== 1) {
        this.empty_list.push({
          'x': last.x,
          'y': last.y
        });
      } else {
        this.score += 100;
        this.snake_list.push({
          'x': last.x,
          'y': last.y
        });
        this.next_pellet();
      }
      remove = 0;
      for (i = _j = 0, _ref1 = this.empty_list.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        if (this.empty_list[i].x === this.snake_list[0].x && this.empty_list[i].y === this.snake_list[0].y) {
          remove = i;
        }
      }
      this.empty_list.splice(remove, 1);
      _ref2 = this.snake_list;
      for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
        s = _ref2[_k];
        this.board.setEntry(s.x, s.y, 2);
      }
      _ref3 = this.empty_list;
      for (_l = 0, _len1 = _ref3.length; _l < _len1; _l++) {
        s = _ref3[_l];
        this.board.setEntry(s.x, s.y, 0);
      }
      return this.board.printboard(this.score);
    };

    function snake(init_x, init_y, speed) {
      this.init_x = init_x;
      this.init_y = init_y;
      this.speed = speed;
      this.reset(this.init_x, this.init_y, this.speed);
    }

    snake.prototype.reset = function(init_x, init_y, speed) {
      var x, y, _i, _j, _ref, _ref1;
      this.board = new board(this.board_width, this.board_height);
      this.board.setEntry(this.init_x, this.init_y, 2);
      this.snake_list = [];
      this.empty_list = [];
      this.score = 0;
      for (x = _i = 0, _ref = this.board_width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.board_height - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          if (x === this.init_x && y === this.init_y) {
            this.snake_list.push({
              'x': this.init_x,
              'y': this.init_y
            });
          } else {
            this.empty_list.push({
              'x': x,
              'y': y
            });
          }
        }
      }
      this.is_gameover = 0;
      document.getElementById('gameover').style.visibility = 'hidden';
      this.next_pellet();
      return this.board.printboard(this.score);
    };

    snake.prototype.next_pellet = function() {
      var pos, random;
      random = Math.floor(Math.random() * this.empty_list.length - 1);
      pos = this.empty_list.splice(random, 1);
      return this.board.setEntry(pos[0].x, pos[0].y, 1);
    };

    snake.prototype.changeDirection = function(keyCode) {
      if (keyCode === 13) {
		if (this.is_gameover === 1) {
		  this.reset(this.init_x, this.init_y, this.speed);
		}
	  }
	  if (keyCode === 37) {
		if (this.snake_list.length > 1 && this.direction === 2) {
		  return this.direction = 2;
		} else {
		  return this.direction = 1;
		}
	  } else if (keyCode === 39) {
		if (this.snake_list.length > 1 && this.direction === 1) {
          return this.direction = 1;
		} else {
		  return this.direction = 2;
		}
	  } else if (keyCode === 38) {
		if (this.snake_list.length > 1 && this.direction === 4) {
          return this.direction = 4;
		} else {
		  return this.direction = 3;
		}
	  } else if (keyCode === 40) {
		if (this.snake_list.length > 1 && this.direction === 3) {
          return this.direction = 3;
		} else {
		  return this.direction = 4;
		}
	  }
	};

    return snake;

  })();

  game = new snake(10, 10, 10);

  setInterval((function() {
    return game.move();
  }), 100);

  $(document).keydown(function(e) {
    return game.changeDirection(e.which);
  });

}).call(this);
